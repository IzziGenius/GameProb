package com.mygdx.starsnake;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class GameField extends ApplicationAdapter {
	SpriteBatch batch;
	Snake snake;
	StarApple starApple;
	Texture apple;
	Win win;

	
	@Override
	public void create () {
		batch = new SpriteBatch();
		snake= new Snake( new Texture("robot.png"));
		apple= new Texture("star.png");
		starApple= StarApple.spaw(apple);
		win= new Win( new Texture("win.jpg"));

	}

	@Override
	public void render () {
		snake.move();
		if(snake.eat(starApple)){
			starApple= StarApple.spaw(apple);
		}
		Gdx.gl.glClearColor(0, 0.2f,0.3f, 0.1f);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		batch.begin();
		snake.draw(batch);
		starApple.draw(batch);
		if(snake.wined()){
			snake.dispose();
			apple.dispose();
			win.draw(batch); }
		batch.end();
		keyPressed();


	}
	public  void keyPressed(){
		if(Gdx.input.isKeyPressed(Input.Keys.LEFT))
			snake.destination(Snake.LEFT);
		if(Gdx.input.isKeyPressed(Input.Keys.RIGHT))
			snake.destination(Snake.RIGHT);
		if(Gdx.input.isKeyPressed(Input.Keys.UP))
			snake.destination(Snake.UP);
		if(Gdx.input.isKeyPressed(Input.Keys.DOWN))
			snake.destination(Snake.DOWN);
	}

	@Override
	public void dispose () {
		batch.dispose();
		snake.dispose();
		apple.dispose();
		starApple.dispose();
	}
}

package com.mygdx.starsnake;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.utils.TimeUtils;


import java.util.LinkedList;

public class Snake extends  Unit{

    public static final int LEFT=0, RIGHT=1, UP=2, DOWN=3;
    private int h=50, dx=h, dy=0;
    private long lastTimeMove= TimeUtils.nanoTime();
    private long timeMove= 300000000;
    private LinkedList<Rectangle>list;

    public Snake(Texture img) {
        super(img);
        list= new LinkedList<Rectangle>();
        for (int i = 0; i <5 ; i++) {
            list.add(new Rectangle(x+h*i, y, h, h));
        }
    }
    public void draw(SpriteBatch batch){
        for (Rectangle r:list) {
            batch.draw(img, r.x, r.y, h, h);
        }
    }
    public boolean wined(){
        if(list.size()>10)
            return true;
                    else return false;
    }

    @Override
    public void move() {
        if(Math.abs(lastTimeMove-TimeUtils.nanoTime())>timeMove){
            lastTimeMove= TimeUtils.nanoTime();
            Rectangle head= list.getFirst();
            list.addFirst(new Rectangle(head.x+dx, head.y+dy, h, h));
            list.removeLast();
        }
    }
    public boolean eat(StarApple starApple){
        Rectangle head= list.getFirst();
        Rectangle apple= starApple.getRectangle();
        if(head.overlaps(apple)){
            list.addFirst(apple);
            timeMove-=10000000;
        }
        return  head.overlaps(apple);
    }


    public void destination(int d) {
    switch (d) {
        case UP: dx = 0; dy=h;
            break;
        case RIGHT: dx=h; dy=0;
            break;
        case LEFT:dx=-h; dy=0;
            break;
        case DOWN:dx=0; dy=-h;
            break;
    }
    }
}
package com.mygdx.starsnake;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Rectangle;

import java.util.Random;

public class StarApple extends  Unit {

    public  static Random random= new Random();
   static int h=50;
    public StarApple(Texture img) {
        super(img);
    }

    @Override
    public void draw(SpriteBatch batch) {
        batch.draw(img, x, y, h, h);
    }

    public  static StarApple spaw(Texture img){
        StarApple starApple= new StarApple(img);
        starApple.x= random.nextInt(10)*h;
        starApple.y= random.nextInt(10)*h;
        return starApple;
    }

    public Rectangle getRectangle(){
        return new Rectangle(x, y, h, h);
    }

    @Override
    public void move() {

    }
}
package com.mygdx.starsnake;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public  abstract class Unit {
    protected Texture img;
    protected int x= 0, y=0;

    public Unit(Texture img) {
        this.img = img;
    }

    public abstract void draw(SpriteBatch batch);
    public abstract void move();


    public  void dispose(){
        img.dispose();
    }

}
package com.mygdx.starsnake;


import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class Win extends Unit {

 static int h= 500, w=700;
    public Win(Texture img) {
        super(img);
    }

    @Override
    public void draw(SpriteBatch batch) {
        batch.draw(img, x, y, w, h);

    }

    @Override
    public void move() {

    }
}
